
arduArm_mc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c05  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090b  00000000  00000000  00000ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000614  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000489  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_18>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 34       	cpi	r26, 0x45	; 69
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 14 01 	call	0x228	; 0x228 <main>
  88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <boot_eeprom>:
#include <util/delay.h>
#define F_CPU 16000000UL
#define UART_BAUD_RATE 9600

void boot_eeprom(void){
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));	//init uart to get data
  90:	87 e6       	ldi	r24, 0x67	; 103
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 df 00 	call	0x1be	; 0x1be <uart_init>
	sei();
  98:	78 94       	sei
	
	
	/* memory full erase */ 
	uint16_t eeprom_cell = 0;
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
	
	for(;eeprom_cell < 1024; eeprom_cell++){
			/* Wait for completion of previous write */
			while(EECR & (1<<EEPE));
  9e:	f9 99       	sbic	0x1f, 1	; 31
  a0:	fe cf       	rjmp	.-4      	; 0x9e <boot_eeprom+0xe>
			
			/* Set up address and Data Registers */
			EEAR = eeprom_cell;
  a2:	92 bd       	out	0x22, r25	; 34
  a4:	81 bd       	out	0x21, r24	; 33
			
			/* erase only */
			EECR |= (1<<EEPM0);
  a6:	fc 9a       	sbi	0x1f, 4	; 31
			
			/* Write logical one to EEMPE */
			EECR |= (1<<EEMPE);
  a8:	fa 9a       	sbi	0x1f, 2	; 31
			/* start wrie*/
			EECR |= (1<<EEPE);
  aa:	f9 9a       	sbi	0x1f, 1	; 31
	
	
	/* memory full erase */ 
	uint16_t eeprom_cell = 0;
	
	for(;eeprom_cell < 1024; eeprom_cell++){
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	81 15       	cp	r24, r1
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	92 07       	cpc	r25, r18
  b4:	a1 f7       	brne	.-24     	; 0x9e <boot_eeprom+0xe>
			
	}
	
	eeprom_cell = 0;
	//			indication		//
	DDRB = 0b00100000;	//13 as output
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;	//disable pull ups
  ba:	15 b8       	out	0x05, r1	; 5
	PORTB = 0b00100000;	// turn on build in led 
  bc:	85 b9       	out	0x05, r24	; 5
	// recive//
	
	uint8_t byte = 0;
	
	
	uart_putc(85);	//готовы принимать
  be:	85 e5       	ldi	r24, 0x55	; 85
  c0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	89 ef       	ldi	r24, 0xF9	; 249
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <boot_eeprom+0x38>
  cc:	00 c0       	rjmp	.+0      	; 0xce <boot_eeprom+0x3e>
  ce:	00 00       	nop
	_delay_ms(1);
	
	UCSR0B = (1<<RXEN0);  //  включаем прием
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
			/* start wrie*/
			EECR |= (1<<EEPE);
			
	}
	
	eeprom_cell = 0;
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(1);
	
	UCSR0B = (1<<RXEN0);  //  включаем прием
	
	while( eeprom_cell<1024){	
		while ( !(UCSR0A & 0b10000000) );	/* Wait for data to be received */
  da:	e0 ec       	ldi	r30, 0xC0	; 192
  dc:	f0 e0       	ldi	r31, 0x00	; 0
		/* Wait for completion of previous write */
		while(EECR & (1<<EEPE));
		
		/* set up address and data registers */
		EEAR = eeprom_cell;
		EEDR = UDR0;
  de:	a6 ec       	ldi	r26, 0xC6	; 198
  e0:	b0 e0       	ldi	r27, 0x00	; 0
	_delay_ms(1);
	
	UCSR0B = (1<<RXEN0);  //  включаем прием
	
	while( eeprom_cell<1024){	
		while ( !(UCSR0A & 0b10000000) );	/* Wait for data to be received */
  e2:	80 81       	ld	r24, Z
  e4:	88 23       	and	r24, r24
  e6:	ec f7       	brge	.-6      	; 0xe2 <boot_eeprom+0x52>
		
												 
		/* Wait for completion of previous write */
		while(EECR & (1<<EEPE));
  e8:	f9 99       	sbic	0x1f, 1	; 31
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <boot_eeprom+0x58>
		
		/* set up address and data registers */
		EEAR = eeprom_cell;
  ec:	32 bd       	out	0x22, r19	; 34
  ee:	21 bd       	out	0x21, r18	; 33
		EEDR = UDR0;
  f0:	8c 91       	ld	r24, X
  f2:	80 bd       	out	0x20, r24	; 32
		
		/* write only */
		EECR &=(0<<EEPM0);
  f4:	8f b3       	in	r24, 0x1f	; 31
  f6:	1f ba       	out	0x1f, r1	; 31
		EECR |= (1<<EEPM1);
  f8:	fd 9a       	sbi	0x1f, 5	; 31
		
		/* Write logical one to EEMPE */
		EECR |= (1<<EEMPE);
  fa:	fa 9a       	sbi	0x1f, 2	; 31
		
		/* Start eeprom write by setting EEPE */
		EECR |= (1<<EEPE);
  fc:	f9 9a       	sbi	0x1f, 1	; 31
		
		//eeprom_write_byte(eeprom_cell,UDR0);	//записываем в еепром
		eeprom_cell++;		// €чейча +1
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
	uart_putc(85);	//готовы принимать
	_delay_ms(1);
	
	UCSR0B = (1<<RXEN0);  //  включаем прием
	
	while( eeprom_cell<1024){	
 102:	21 15       	cp	r18, r1
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	39 07       	cpc	r19, r25
 108:	61 f7       	brne	.-40     	; 0xe2 <boot_eeprom+0x52>
		//eeprom_write_byte(eeprom_cell,UDR0);	//записываем в еепром
		eeprom_cell++;		// €чейча +1
	}
	
	
	uart_putc(0b10101010);	//закончили принимать
 10a:	8a ea       	ldi	r24, 0xAA	; 170
 10c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_putc>
	
	PORTB = 0b00000000;	// turn off build in led 
 110:	15 b8       	out	0x05, r1	; 5
 112:	08 95       	ret

00000114 <__vector_18>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
 128:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 12c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 130:	88 71       	andi	r24, 0x18	; 24
 132:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <UART_RxHead>
 136:	ef 5f       	subi	r30, 0xFF	; 255
 138:	ef 71       	andi	r30, 0x1F	; 31
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UART_RxTail>
 13e:	e9 17       	cp	r30, r25
 140:	39 f0       	breq	.+14     	; 0x150 <__vector_18+0x3c>
 142:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <UART_RxHead>
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	eb 5f       	subi	r30, 0xFB	; 251
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	20 83       	st	Z, r18
 14e:	01 c0       	rjmp	.+2      	; 0x152 <__vector_18+0x3e>
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_19>:
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
 17c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 180:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 184:	98 17       	cp	r25, r24
 186:	69 f0       	breq	.+26     	; 0x1a2 <__vector_19+0x38>
 188:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TxTail>
 18c:	ef 5f       	subi	r30, 0xFF	; 255
 18e:	ef 71       	andi	r30, 0x1F	; 31
 190:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <UART_TxTail>
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	eb 5d       	subi	r30, 0xDB	; 219
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	80 81       	ld	r24, Z
 19c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <__vector_19+0x42>
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	80 83       	st	Z, r24
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <uart_init>:
 1be:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_TxHead>
 1c2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_TxTail>
 1c6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_RxHead>
 1ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART_RxTail>
 1ce:	99 23       	and	r25, r25
 1d0:	24 f4       	brge	.+8      	; 0x1da <uart_init+0x1c>
 1d2:	22 e0       	ldi	r18, 0x02	; 2
 1d4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1d8:	9f 77       	andi	r25, 0x7F	; 127
 1da:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1e2:	88 e9       	ldi	r24, 0x98	; 152
 1e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1ee:	08 95       	ret

000001f0 <uart_putc>:
 1f0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <UART_TxHead>
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	2f 71       	andi	r18, 0x1F	; 31
 1f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_TxTail>
 1fc:	29 17       	cp	r18, r25
 1fe:	e1 f3       	breq	.-8      	; 0x1f8 <uart_putc+0x8>
 200:	e2 2f       	mov	r30, r18
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	eb 5d       	subi	r30, 0xDB	; 219
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	80 83       	st	Z, r24
 20a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <UART_TxHead>
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	80 62       	ori	r24, 0x20	; 32
 216:	80 83       	st	Z, r24
 218:	08 95       	ret

0000021a <EEPROM_read>:

#define UART_BAUD_RATE 9600
unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
 21a:	f9 99       	sbic	0x1f, 1	; 31
 21c:	fe cf       	rjmp	.-4      	; 0x21a <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
 21e:	92 bd       	out	0x22, r25	; 34
 220:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
 222:	f8 9a       	sbi	0x1f, 0	; 31
	/* Return data from Data Register */
	return EEDR;
 224:	80 b5       	in	r24, 0x20	; 32
}
 226:	08 95       	ret

00000228 <main>:

int main(void) {
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
	//tmp
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));	//init uart to get data
 22c:	87 e6       	ldi	r24, 0x67	; 103
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 df 00 	call	0x1be	; 0x1be <uart_init>
	sei();
 234:	78 94       	sei
	
	//---------
	
//	uint8_t data = 0;
	
	DDRB = 0b0000000;		//all input
 236:	14 b8       	out	0x04, r1	; 4
	PORTB = 0x00;			
 238:	15 b8       	out	0x05, r1	; 5
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	83 ed       	ldi	r24, 0xD3	; 211
 23e:	90 e3       	ldi	r25, 0x30	; 48
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x18>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x22>
 24a:	00 00       	nop
	
	
	_delay_ms(1000);
	
	if(PINB & (1<<PB0)){	//if 8 is off
 24c:	18 9b       	sbis	0x03, 0	; 3
 24e:	0e c0       	rjmp	.+28     	; 0x26c <main+0x44>
		boot_eeprom();				// download programm and load it to eeprom
 250:	0e 94 48 00 	call	0x90	; 0x90 <boot_eeprom>
 254:	0b c0       	rjmp	.+22     	; 0x26c <main+0x44>
	
	
	
			
	for(uint16_t i = 0; i < 1024;i++){	//отправл€ем в юарт дл€ дебага
		uart_putc(EEPROM_read(i));
 256:	ce 01       	movw	r24, r28
 258:	0e 94 0d 01 	call	0x21a	; 0x21a <EEPROM_read>
 25c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <uart_putc>
	
	
	
	
			
	for(uint16_t i = 0; i < 1024;i++){	//отправл€ем в юарт дл€ дебага
 260:	21 96       	adiw	r28, 0x01	; 1
 262:	c1 15       	cp	r28, r1
 264:	24 e0       	ldi	r18, 0x04	; 4
 266:	d2 07       	cpc	r29, r18
 268:	b1 f7       	brne	.-20     	; 0x256 <main+0x2e>
 26a:	03 c0       	rjmp	.+6      	; 0x272 <main+0x4a>
	EECR |= (1<<EERE);
	/* Return data from Data Register */
	return EEDR;
}

int main(void) {
 26c:	c0 e0       	ldi	r28, 0x00	; 0
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	f2 cf       	rjmp	.-28     	; 0x256 <main+0x2e>
		uart_putc(EEPROM_read(i));
	}
	
	
	
}
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
