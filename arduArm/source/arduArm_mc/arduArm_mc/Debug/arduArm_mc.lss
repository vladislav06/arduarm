
arduArm_mc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800100  00800100  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000003f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d36  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000892  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f7  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ad  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000664  00000000  00000000  00002699  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002cfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_18>
  4c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 3a       	cpi	r26, 0xA9	; 169
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  88:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <eeprom_read_prog>:
 *  Author: mrkev
 */
#include "eeprom.h" 

			//refresh memory blocks
void eeprom_read_prog(char prog_num ){
  90:	ef 92       	push	r14
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
		
		
		char i;
			prog_num=prog_num-1;
  9c:	81 50       	subi	r24, 0x01	; 1
			prog_num=prog_num*100;
  9e:	04 e6       	ldi	r16, 0x64	; 100
  a0:	80 9f       	mul	r24, r16
  a2:	00 2d       	mov	r16, r0
  a4:	11 24       	eor	r1, r1
  a6:	c6 e4       	ldi	r28, 0x46	; 70
  a8:	d1 e0       	ldi	r29, 0x01	; 1
  aa:	0f 2e       	mov	r0, r31
  ac:	fa ea       	ldi	r31, 0xAA	; 170
  ae:	ef 2e       	mov	r14, r31
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	ff 2e       	mov	r15, r31
  b4:	f0 2d       	mov	r31, r0
		for(i=1;i!=101;i=i+1){
			programm[i]=eeprom_read_byte((void*)prog_num+i);
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	05 54       	subi	r16, 0x45	; 69
  ba:	11 40       	sbci	r17, 0x01	; 1
  bc:	c8 01       	movw	r24, r16
  be:	8c 0f       	add	r24, r28
  c0:	9d 1f       	adc	r25, r29
  c2:	0e 94 6f 01 	call	0x2de	; 0x2de <eeprom_read_byte>
  c6:	89 93       	st	Y+, r24
		
		
		char i;
			prog_num=prog_num-1;
			prog_num=prog_num*100;
		for(i=1;i!=101;i=i+1){
  c8:	ce 15       	cp	r28, r14
  ca:	df 05       	cpc	r29, r15
  cc:	b9 f7       	brne	.-18     	; 0xbc <eeprom_read_prog+0x2c>
			programm[i]=eeprom_read_byte((void*)prog_num+i);
		}
			
			
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	1f 91       	pop	r17
  d4:	0f 91       	pop	r16
  d6:	ff 90       	pop	r15
  d8:	ef 90       	pop	r14
  da:	08 95       	ret

000000dc <eeprom_save>:
		eeprom_read_block((void*)&prog5,(const void*)400,100);
}


*/
void  eeprom_save(char prog[100],char prog_num){
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	
			char i;
			prog_num=prog_num-1;
  e8:	61 50       	subi	r22, 0x01	; 1
  ea:	8c 01       	movw	r16, r24
  ec:	0f 5f       	subi	r16, 0xFF	; 255
  ee:	1f 4f       	sbci	r17, 0xFF	; 255
  f0:	84 e6       	ldi	r24, 0x64	; 100
  f2:	68 9f       	mul	r22, r24
  f4:	e0 2c       	mov	r14, r0
  f6:	11 24       	eor	r1, r1
  f8:	f1 2c       	mov	r15, r1
  fa:	e7 01       	movw	r28, r14
  fc:	21 96       	adiw	r28, 0x01	; 1
  fe:	85 e6       	ldi	r24, 0x65	; 101
 100:	e8 0e       	add	r14, r24
 102:	f1 1c       	adc	r15, r1
			
			//eeprom_write_block((const void*)&prog,( void*)prog_num,100);
			
			
			for(i=1;i!=101;i=i+1){
				eeprom:eeprom_write_byte((void*)prog_num+i,prog[i]);
 104:	f8 01       	movw	r30, r16
 106:	61 91       	ld	r22, Z+
 108:	8f 01       	movw	r16, r30
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	ce 01       	movw	r24, r28
 10e:	0e 94 77 01 	call	0x2ee	; 0x2ee <eeprom_write_byte>
 112:	21 96       	adiw	r28, 0x01	; 1
			prog_num=prog_num*100;
			
			//eeprom_write_block((const void*)&prog,( void*)prog_num,100);
			
			
			for(i=1;i!=101;i=i+1){
 114:	ce 15       	cp	r28, r14
 116:	df 05       	cpc	r29, r15
 118:	a9 f7       	brne	.-22     	; 0x104 <eeprom_save+0x28>
				eeprom:eeprom_write_byte((void*)prog_num+i,prog[i]);
			}
			

 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	08 95       	ret

00000128 <__vector_18>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
 13c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 140:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 144:	88 71       	andi	r24, 0x18	; 24
 146:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <UART_RxHead>
 14a:	ef 5f       	subi	r30, 0xFF	; 255
 14c:	ef 71       	andi	r30, 0x1F	; 31
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UART_RxTail>
 152:	e9 17       	cp	r30, r25
 154:	39 f0       	breq	.+14     	; 0x164 <__vector_18+0x3c>
 156:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <UART_RxHead>
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	eb 5f       	subi	r30, 0xFB	; 251
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	20 83       	st	Z, r18
 162:	01 c0       	rjmp	.+2      	; 0x166 <__vector_18+0x3e>
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <__vector_19>:
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
 190:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 194:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 198:	98 17       	cp	r25, r24
 19a:	69 f0       	breq	.+26     	; 0x1b6 <__vector_19+0x38>
 19c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TxTail>
 1a0:	ef 5f       	subi	r30, 0xFF	; 255
 1a2:	ef 71       	andi	r30, 0x1F	; 31
 1a4:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <UART_TxTail>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	eb 5d       	subi	r30, 0xDB	; 219
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	80 81       	ld	r24, Z
 1b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <__vector_19+0x42>
 1b6:	e1 ec       	ldi	r30, 0xC1	; 193
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 7d       	andi	r24, 0xDF	; 223
 1be:	80 83       	st	Z, r24
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <uart_init>:
 1d2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_TxHead>
 1d6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_TxTail>
 1da:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_RxHead>
 1de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART_RxTail>
 1e2:	99 23       	and	r25, r25
 1e4:	24 f4       	brge	.+8      	; 0x1ee <uart_init+0x1c>
 1e6:	22 e0       	ldi	r18, 0x02	; 2
 1e8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1ec:	9f 77       	andi	r25, 0x7F	; 127
 1ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1f6:	88 e9       	ldi	r24, 0x98	; 152
 1f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 202:	08 95       	ret

00000204 <uart_putc>:
 204:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <UART_TxHead>
 208:	2f 5f       	subi	r18, 0xFF	; 255
 20a:	2f 71       	andi	r18, 0x1F	; 31
 20c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_TxTail>
 210:	29 17       	cp	r18, r25
 212:	e1 f3       	breq	.-8      	; 0x20c <uart_putc+0x8>
 214:	e2 2f       	mov	r30, r18
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	eb 5d       	subi	r30, 0xDB	; 219
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	80 83       	st	Z, r24
 21e:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <UART_TxHead>
 222:	e1 ec       	ldi	r30, 0xC1	; 193
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	80 83       	st	Z, r24
 22c:	08 95       	ret

0000022e <main>:
#include "uart/uart.h"
 



int main(void) {
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	c4 56       	subi	r28, 0x64	; 100
 238:	d1 09       	sbc	r29, r1
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 244:	87 e6       	ldi	r24, 0x67	; 103
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <uart_init>
	sei();
 24c:	78 94       	sei
		//data writing to the command
		prog_data[1]=prog_data[1]|2;//programm type
		prog_data[1]=prog_data[1]<<3;
		prog_data[1]=prog_data[1]|3;//2 servo
		prog_data[1]=prog_data[1]<<3;
		prog_data[1]=prog_data[1]|2;//1 servo
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	82 95       	swap	r24
 252:	88 0f       	add	r24, r24
 254:	88 0f       	add	r24, r24
 256:	80 7c       	andi	r24, 0xC0	; 192
 258:	8a 69       	ori	r24, 0x9A	; 154
 25a:	8a 83       	std	Y+2, r24	; 0x02
		//angels for servo
		prog_data[2]=120;
 25c:	88 e7       	ldi	r24, 0x78	; 120
 25e:	8b 83       	std	Y+3, r24	; 0x03
		prog_data[3]=42;
 260:	8a e2       	ldi	r24, 0x2A	; 42
 262:	8c 83       	std	Y+4, r24	; 0x04
		//load to eeprom
		eeprom_save(prog_data,1);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 6e 00 	call	0xdc	; 0xdc <eeprom_save>
		eeprom_read_prog(1);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 48 00 	call	0x90	; 0x90 <eeprom_read_prog>
		
		//for(i=1;i!=101;i=i+1){
			i=1;
			comands[2]=programm[i]&7;//1servo number
 274:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <programm+0x1>
 278:	98 2f       	mov	r25, r24
 27a:	97 70       	andi	r25, 0x07	; 7
 27c:	e9 2e       	mov	r14, r25
			
			comands[3]=programm[i]&56;//2servo number
			comands[3]=comands[3]>>3;//normalizing
 27e:	18 2f       	mov	r17, r24
 280:	18 73       	andi	r17, 0x38	; 56
 282:	16 95       	lsr	r17
 284:	16 95       	lsr	r17
 286:	16 95       	lsr	r17
		
			comands[1]=programm[i]&192;//prog type
			comands[1]=comands[1]>>6;//normalizing
 288:	82 95       	swap	r24
 28a:	86 95       	lsr	r24
 28c:	86 95       	lsr	r24
 28e:	83 70       	andi	r24, 0x03	; 3
			//test sum
			
			//reading servo angels
			//if 2 servos detected
			if(comands[1]==2){
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	29 f4       	brne	.+10     	; 0x29e <main+0x70>
				i++;
				comands[4]=programm[i];
 294:	e5 e4       	ldi	r30, 0x45	; 69
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	02 81       	ldd	r16, Z+2	; 0x02
				i++;
				comands[5]=programm[i];
 29a:	f3 80       	ldd	r15, Z+3	; 0x03
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <main+0x78>
			}
			//if 1 servo detected
			if(comands[1]==1){
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <main+0x78>
				i++;
				comands[4]=programm[i];
 2a2:	00 91 47 01 	lds	r16, 0x0147	; 0x800147 <programm+0x2>
			eeprom_write_byte((void*)i,0);
		}
		
		*/
		///*
		uart_putc(comands[1]);
 2a6:	0e 94 02 01 	call	0x204	; 0x204 <uart_putc>
		uart_putc(comands[2]);
 2aa:	8e 2d       	mov	r24, r14
 2ac:	0e 94 02 01 	call	0x204	; 0x204 <uart_putc>
		uart_putc(comands[3]);
 2b0:	81 2f       	mov	r24, r17
 2b2:	0e 94 02 01 	call	0x204	; 0x204 <uart_putc>
		uart_putc(comands[4]);
 2b6:	80 2f       	mov	r24, r16
 2b8:	0e 94 02 01 	call	0x204	; 0x204 <uart_putc>
		uart_putc(comands[5]);
 2bc:	8f 2d       	mov	r24, r15
 2be:	0e 94 02 01 	call	0x204	; 0x204 <uart_putc>
 2c2:	00 e0       	ldi	r16, 0x00	; 0
 2c4:	10 e0       	ldi	r17, 0x00	; 0
		for(i=1;i!=6;i=i+1){
			//USART_Transmit((uint8_t)comands[i]);
		}
		for(i=0;i!=1024;i=i+1){
			//USART_Transmit((uint8_t)programm[i]);
			uart_putc(eeprom_read_byte((void*)i));	
 2c6:	c8 01       	movw	r24, r16
 2c8:	0e 94 6f 01 	call	0x2de	; 0x2de <eeprom_read_byte>
 2cc:	0e 94 02 01 	call	0x204	; 0x204 <uart_putc>
		uart_putc(comands[5]);
		//*/
		for(i=1;i!=6;i=i+1){
			//USART_Transmit((uint8_t)comands[i]);
		}
		for(i=0;i!=1024;i=i+1){
 2d0:	0f 5f       	subi	r16, 0xFF	; 255
 2d2:	1f 4f       	sbci	r17, 0xFF	; 255
 2d4:	01 15       	cp	r16, r1
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	18 07       	cpc	r17, r24
 2da:	a9 f7       	brne	.-22     	; 0x2c6 <main+0x98>
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <main+0xae>

000002de <eeprom_read_byte>:
 2de:	f9 99       	sbic	0x1f, 1	; 31
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <eeprom_read_byte>
 2e2:	92 bd       	out	0x22, r25	; 34
 2e4:	81 bd       	out	0x21, r24	; 33
 2e6:	f8 9a       	sbi	0x1f, 0	; 31
 2e8:	99 27       	eor	r25, r25
 2ea:	80 b5       	in	r24, 0x20	; 32
 2ec:	08 95       	ret

000002ee <eeprom_write_byte>:
 2ee:	26 2f       	mov	r18, r22

000002f0 <eeprom_write_r18>:
 2f0:	f9 99       	sbic	0x1f, 1	; 31
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <eeprom_write_r18>
 2f4:	1f ba       	out	0x1f, r1	; 31
 2f6:	92 bd       	out	0x22, r25	; 34
 2f8:	81 bd       	out	0x21, r24	; 33
 2fa:	20 bd       	out	0x20, r18	; 32
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	fa 9a       	sbi	0x1f, 2	; 31
 302:	f9 9a       	sbi	0x1f, 1	; 31
 304:	0f be       	out	0x3f, r0	; 63
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
