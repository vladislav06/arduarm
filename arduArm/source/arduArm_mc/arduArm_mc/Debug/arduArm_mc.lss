
arduArm_mc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800100  00800100  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000370  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8d  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000859  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062e  00000000  00000000  0000191e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a0  00000000  00000000  00002098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000433  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000296b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_18>
  4c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 34       	cpi	r26, 0x45	; 69
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 02 01 	call	0x204	; 0x204 <main>
  88:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <boot_eeprom>:
#include <uart.h>

#define F_CPU 16000000UL
#define UART_BAUD_RATE 9600

void boot_eeprom(void){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	//uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));	//init uart to get data
	sei();
  94:	78 94       	sei
	
	//			indication		//
	DDRB = 0b00100000;	//13 as output
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;	//disable pull ups
  9a:	15 b8       	out	0x05, r1	; 5
	PORTB = 0b00100000;	// turn on build in led 
  9c:	85 b9       	out	0x05, r24	; 5
	
	// recive//
	
	uint8_t byte = 0;
	
	uint16_t eeprom_cell = 0;
  9e:	c0 e0       	ldi	r28, 0x00	; 0
  a0:	d0 e0       	ldi	r29, 0x00	; 0
	while(eeprom_cell<1024){
		
		
		
		
		byte = uart_getc();
  a2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <uart_getc>
		
		eeprom_write_byte(eeprom_cell,byte);
  a6:	bc 01       	movw	r22, r24
  a8:	77 27       	eor	r23, r23
  aa:	ce 01       	movw	r24, r28
  ac:	0e 94 33 01 	call	0x266	; 0x266 <eeprom_write_byte>
		
		
		eeprom_cell++;
  b0:	21 96       	adiw	r28, 0x01	; 1
	
	uint8_t byte = 0;
	
	uint16_t eeprom_cell = 0;
	
	while(eeprom_cell<1024){
  b2:	c1 15       	cp	r28, r1
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	d8 07       	cpc	r29, r24
  b8:	a1 f7       	brne	.-24     	; 0xa2 <boot_eeprom+0x12>
		eeprom_cell++;
		
	}
	
	
	uart_putc(0b101010100);
  ba:	84 e5       	ldi	r24, 0x54	; 84
  bc:	0e 94 ed 00 	call	0x1da	; 0x1da <uart_putc>
	
	PORTB = 0b00000000;	// turn off build in led 
  c0:	15 b8       	out	0x05, r1	; 5
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <__vector_18>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  e0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e4:	88 71       	andi	r24, 0x18	; 24
  e6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <UART_RxHead>
  ea:	ef 5f       	subi	r30, 0xFF	; 255
  ec:	ef 71       	andi	r30, 0x1F	; 31
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UART_RxTail>
  f2:	e9 17       	cp	r30, r25
  f4:	39 f0       	breq	.+14     	; 0x104 <__vector_18+0x3c>
  f6:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <UART_RxHead>
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	eb 5f       	subi	r30, 0xFB	; 251
  fe:	fe 4f       	sbci	r31, 0xFE	; 254
 100:	20 83       	st	Z, r18
 102:	01 c0       	rjmp	.+2      	; 0x106 <__vector_18+0x3e>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_19>:
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 134:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 138:	98 17       	cp	r25, r24
 13a:	69 f0       	breq	.+26     	; 0x156 <__vector_19+0x38>
 13c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TxTail>
 140:	ef 5f       	subi	r30, 0xFF	; 255
 142:	ef 71       	andi	r30, 0x1F	; 31
 144:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <UART_TxTail>
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	eb 5d       	subi	r30, 0xDB	; 219
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	80 81       	ld	r24, Z
 150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 154:	05 c0       	rjmp	.+10     	; 0x160 <__vector_19+0x42>
 156:	e1 ec       	ldi	r30, 0xC1	; 193
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	80 83       	st	Z, r24
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <uart_init>:
 172:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_TxHead>
 176:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_TxTail>
 17a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_RxHead>
 17e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART_RxTail>
 182:	99 23       	and	r25, r25
 184:	24 f4       	brge	.+8      	; 0x18e <uart_init+0x1c>
 186:	22 e0       	ldi	r18, 0x02	; 2
 188:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 18c:	9f 77       	andi	r25, 0x7F	; 127
 18e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 192:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 196:	88 e9       	ldi	r24, 0x98	; 152
 198:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1a2:	08 95       	ret

000001a4 <uart_getc>:
 1a4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <UART_RxHead>
 1a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART_RxTail>
 1ac:	98 17       	cp	r25, r24
 1ae:	91 f0       	breq	.+36     	; 0x1d4 <uart_getc+0x30>
 1b0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <UART_RxTail>
 1b4:	ef 5f       	subi	r30, 0xFF	; 255
 1b6:	ef 71       	andi	r30, 0x1F	; 31
 1b8:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <UART_RxTail>
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	eb 5f       	subi	r30, 0xFB	; 251
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	20 81       	ld	r18, Z
 1c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	98 2f       	mov	r25, r24
 1cc:	88 27       	eor	r24, r24
 1ce:	82 0f       	add	r24, r18
 1d0:	91 1d       	adc	r25, r1
 1d2:	08 95       	ret
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	08 95       	ret

000001da <uart_putc>:
 1da:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <UART_TxHead>
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	2f 71       	andi	r18, 0x1F	; 31
 1e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_TxTail>
 1e6:	29 17       	cp	r18, r25
 1e8:	e1 f3       	breq	.-8      	; 0x1e2 <uart_putc+0x8>
 1ea:	e2 2f       	mov	r30, r18
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	eb 5d       	subi	r30, 0xDB	; 219
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	80 83       	st	Z, r24
 1f4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <UART_TxHead>
 1f8:	e1 ec       	ldi	r30, 0xC1	; 193
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <main>:
*/

#define UART_BAUD_RATE 9600


int main(void) {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
	//tmp
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));	//init uart to get data
 208:	87 e6       	ldi	r24, 0x67	; 103
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 b9 00 	call	0x172	; 0x172 <uart_init>
	sei();
 210:	78 94       	sei
	
	uart_putc(255);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	0e 94 ed 00 	call	0x1da	; 0x1da <uart_putc>
	//---------
	uint8_t data = 0;
	DDRB = 0b0000000;		//all input
 218:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;			//pull up
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	85 b9       	out	0x05, r24	; 5
	data = PINB;
 21e:	c3 b1       	in	r28, 0x03	; 3
	uart_putc(data);
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 ed 00 	call	0x1da	; 0x1da <uart_putc>
	if(data == 0b00000000){	//if 8 is off
 226:	c1 11       	cpse	r28, r1
 228:	0e c0       	rjmp	.+28     	; 0x246 <main+0x42>
		boot_eeprom();				// download programm and load it to eeprom
 22a:	0e 94 48 00 	call	0x90	; 0x90 <boot_eeprom>
 22e:	0b c0       	rjmp	.+22     	; 0x246 <main+0x42>
	
	
	
	for(int i = 0; i < 1024;i++){
		
		uart_putc(eeprom_read_byte(i));
 230:	ce 01       	movw	r24, r28
 232:	0e 94 2b 01 	call	0x256	; 0x256 <eeprom_read_byte>
 236:	0e 94 ed 00 	call	0x1da	; 0x1da <uart_putc>
	
	
	
	
	
	for(int i = 0; i < 1024;i++){
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c1 15       	cp	r28, r1
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	d8 07       	cpc	r29, r24
 242:	b1 f7       	brne	.-20     	; 0x230 <main+0x2c>
 244:	03 c0       	rjmp	.+6      	; 0x24c <main+0x48>
*/

#define UART_BAUD_RATE 9600


int main(void) {
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	f2 cf       	rjmp	.-28     	; 0x230 <main+0x2c>
		
	}
	
	
	
}
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <eeprom_read_byte>:
 256:	f9 99       	sbic	0x1f, 1	; 31
 258:	fe cf       	rjmp	.-4      	; 0x256 <eeprom_read_byte>
 25a:	92 bd       	out	0x22, r25	; 34
 25c:	81 bd       	out	0x21, r24	; 33
 25e:	f8 9a       	sbi	0x1f, 0	; 31
 260:	99 27       	eor	r25, r25
 262:	80 b5       	in	r24, 0x20	; 32
 264:	08 95       	ret

00000266 <eeprom_write_byte>:
 266:	26 2f       	mov	r18, r22

00000268 <eeprom_write_r18>:
 268:	f9 99       	sbic	0x1f, 1	; 31
 26a:	fe cf       	rjmp	.-4      	; 0x268 <eeprom_write_r18>
 26c:	1f ba       	out	0x1f, r1	; 31
 26e:	92 bd       	out	0x22, r25	; 34
 270:	81 bd       	out	0x21, r24	; 33
 272:	20 bd       	out	0x20, r18	; 32
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	fa 9a       	sbi	0x1f, 2	; 31
 27a:	f9 9a       	sbi	0x1f, 1	; 31
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
